import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import { useNavigate } from 'react-router-dom';
import './ListaOfferte.css';

function ListaOfferte({ currentUser, searchTerm }) {
  const navigate = useNavigate();
  const [annunci, setAnnunci] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  // Carica gli annunci al montaggio del componente
  useEffect(() => {
    fetchAnnunci();
  }, []);

  const fetchAnnunci = async () => {
    try {
      setIsLoading(true);
      setError('');

      console.log('Fetching annunci...');
      // Aggiungiamo il parametro populate per ottenere i dati completi
      const response = await fetch('http://localhost:1337/api/annuncios?populate=*', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Errore API: ${response.status}`);
      }

      const data = await response.json();
      console.log('Dati annunci ricevuti:', data); // Debug per verificare la struttura

      // Verifichiamo la struttura della risposta e filtriamo solo quelli pubblicati
      if (data && data.data) {
        // Filtra solo gli annunci con stato "pubblicato"
        const annunciPubblicati = data.data.filter(annuncio => {
          // Accediamo allo stato in modo sicuro considerando tutte le possibili strutture
          let stato = null;
          
          // Metodo 1: stato direttamente nell'oggetto annuncio
          if (annuncio.stato !== undefined) {
            stato = annuncio.stato;
          }
          // Metodo 2: stato in attributes
          else if (annuncio.attributes && annuncio.attributes.stato !== undefined) {
            stato = annuncio.attributes.stato;
          }
          // Metodo 3: stato più profondamente annidato in data.attributes
          else if (annuncio.attributes && annuncio.attributes.data && 
                  annuncio.attributes.data.attributes && 
                  annuncio.attributes.data.attributes.stato !== undefined) {
            stato = annuncio.attributes.data.attributes.stato;
          }
          
          console.log(`Annuncio ID ${annuncio.id || 'senza id'}: stato = ${stato}`);
          return stato === "pubblicato";
        });
        
        console.log(`?? Mostrando ${annunciPubblicati.length} annunci pubblicati di ${data.data.length} totali`);
        setAnnunci(annunciPubblicati);
      } else {
        console.error('Formato dati non valido:', data);
        setError('Formato dati non valido ricevuto dal server');
      }
    } catch (error) {
      console.error('Errore nel caricamento degli annunci:', error);
      setError(`Errore nel caricamento degli annunci: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  // Funzione per nascondere un annuncio (solo per il creatore)
  const handleDeleteAnnuncio = async (annuncioId, titoloAnnuncio) => {
    const conferma = window.confirm(
      `Sei sicuro di voler nascondere l'annuncio "${titoloAnnuncio}"?\n\nL'annuncio non sarà più visibile ma rimarrà salvato e potrai ripubblicarlo dalla gestione annunci.`
    );
    
    if (!conferma) return;

    try {
      const jwt = localStorage.getItem('jwt');
      if (!jwt) {
        alert('Token di autenticazione mancante');
        return;
      }

      // Cambia lo stato a "nascosto" invece di cancellare
      const hideData = {
        data: {
          stato: "nascosto"
        }
      };

      const response = await fetch(`http://localhost:1337/api/annuncios/${annuncioId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${jwt}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(hideData)
      });

      if (!response.ok) {
        throw new Error(`Errore nel nascondere l'annuncio: ${response.status}`);
      }

      // Aggiorna la lista rimuovendo l'annuncio nascosto dalla vista
      setAnnunci(prevAnnunci => prevAnnunci.filter(annuncio => annuncio.id !== annuncioId));
      alert(`? Annuncio "${titoloAnnuncio}" nascosto con successo!`);
      
    } catch (error) {
      console.error('Errore nel nascondere l\'annuncio:', error);
      alert(`? Errore: ${error.message}`);
    }
  };

  // Funzione per verificare se l'utente può nascondere un annuncio
  const canDeleteAnnuncio = (annuncio) => {
    if (!currentUser || currentUser.roleType !== 'recruiter') return false;
    
    // Verifica se l'annuncio è stato creato dall'utente corrente
    // Gestisce diverse strutture di dati possibili
    const createdById = annuncio.createdby?.id || 
                       annuncio.attributes?.createdby?.data?.id ||
                       (annuncio.attributes?.createdby && annuncio.attributes.createdby.id);
    
    return createdById && createdById.toString() === currentUser.id.toString();
  };

  // Funzione per formattare la data
  const formatDate = (dateString) => {
    if (!dateString) return 'Data non disponibile';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('it-IT', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return 'Data non valida';
    }
  };

  // Funzione per aiutare a estrarre i valori dagli annunci in modo più sicuro
  const getAnnuncioValue = (annuncio, field) => {
    if (!annuncio) return null;
    
    // Metodo 1: Accesso diretto
    if (annuncio[field] !== undefined) {
      return annuncio[field];
    }
    
    // Metodo 2: Accesso tramite attributes
    if (annuncio.attributes && annuncio.attributes[field] !== undefined) {
      return annuncio.attributes[field];
    }
    
    // Metodo 3: Accesso tramite data.attributes (per risposta API annidata)
    if (annuncio.data && annuncio.data.attributes && annuncio.data.attributes[field] !== undefined) {
      return annuncio.data.attributes[field];
    }

    // Metodo 4: Accesso più profondo per campi annidati come createdby
    if (annuncio.attributes && annuncio.attributes.data && 
        annuncio.attributes.data.attributes && 
        annuncio.attributes.data.attributes[field] !== undefined) {
      return annuncio.attributes.data.attributes[field];
    }

    return null;
  };

  // Funzione per filtrare gli annunci in base al termine di ricerca
  const filterAnnunci = (annunci, searchTerm) => {
    if (!searchTerm || searchTerm.trim() === '') {
      return annunci;
    }

    const searchLower = searchTerm.toLowerCase().trim();
    
    return annunci.filter(annuncio => {
      // Ottieni titolo e descrizione in modo sicuro
      const titolo = (annuncio.attributes?.titolo || getAnnuncioValue(annuncio, 'titolo') || '').toLowerCase();
      const descrizione = (annuncio.attributes?.descrizione || getAnnuncioValue(annuncio, 'descrizione') || '').toLowerCase();
      
      // Ottieni il nome dell'azienda/recruiter se disponibile
      const recruiterNome = annuncio.createdby?.nome || '';
      const recruiterCognome = annuncio.createdby?.cognome || '';
      const azienda = annuncio.createdby?.azienda || '';
      const fullRecruiterName = `${recruiterNome} ${recruiterCognome} ${azienda}`.toLowerCase();
      
      // Cerca in tutti i campi rilevanti
      return titolo.includes(searchLower) || 
             descrizione.includes(searchLower) || 
             fullRecruiterName.includes(searchLower);
    });
  };

  // Applica il filtro agli annunci
  const annunciFiltrati = filterAnnunci(annunci, searchTerm);

  return (
    <div className="lista-offerte-container">
      {/* Header della pagina */}
      <div className="lista-offerte-header">
        <button 
          className="back-button"
          onClick={() => navigate('/welcome')}
        >
          ? Torna alla Home
        </button>
        <h1 className="lista-offerte-title">Lista Offerte di Lavoro</h1>
        <p className="lista-offerte-subtitle">
          Esplora tutte le opportunità di lavoro disponibili sulla piattaforma
        </p>
      </div>

      {/* Contenuto principale */}
      <div className="lista-offerte-content">
        {/* Stato di caricamento */}
        {isLoading && (
          <div className="loading-message">
            <p>Caricamento annunci...</p>
          </div>
        )}

        {/* Messaggio di errore */}
        {error && (
          <div className="error-message">
            <p>Errore nel caricamento: {error}</p>
            <button onClick={fetchAnnunci}>Riprova</button>
          </div>
        )}

        {/* Lista degli annunci */}
        {!isLoading && !error && (
          <div className="annunci-list">
            {annunciFiltrati.length === 0 ? (
              <div className="no-results">
                <p>
                  {searchTerm ? 
                    `Nessun risultato per "${searchTerm}"` : 
                    'Nessun annuncio disponibile al momento'
                  }
                </p>
              </div>
            ) : (
              annunciFiltrati.map((annuncio) => (
                <div key={annuncio.id} className="annuncio-item">
                  <div className="annuncio-header">
                    <div>
                      <h4 className="annuncio-title">
                        {annuncio.attributes?.titolo || 
                         getAnnuncioValue(annuncio, 'titolo') || 
                         'Titolo non disponibile'}
                      </h4>
                      <p className="annuncio-company">
                        {annuncio.createdby?.azienda || 'Azienda non specificata'}
                      </p>
                    </div>
                    {canDeleteAnnuncio(annuncio) && (
                      <button 
                        className="delete-button-small"
                        onClick={() => handleDeleteAnnuncio(
                          annuncio.id, 
                          annuncio.attributes?.titolo || getAnnuncioValue(annuncio, 'titolo')
                        )}
                        title="Nascondi annuncio"
                      >
                        ×
                      </button>
                    )}
                  </div>

                  <div className="annuncio-description">
                    <ReactMarkdown>
                      {(annuncio.attributes?.descrizione || 
                       getAnnuncioValue(annuncio, 'descrizione') || 
                       'Descrizione non disponibile...').substring(0, 200)}
                      {(annuncio.attributes?.descrizione || getAnnuncioValue(annuncio, 'descrizione') || '').length > 200 && '...'}
                    </ReactMarkdown>
                  </div>

                  <div className="annuncio-meta">
                    <span className="annuncio-date">
                      Pubblicato: {formatDate(annuncio.attributes?.createdAt)}
                    </span>
                    <span className="annuncio-type">
                      {annuncio.attributes?.tipo || 'Lavoro'}
                    </span>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default ListaOfferte;
